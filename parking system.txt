`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 17.06.2025 14:10:55
// Design Name: 
// Module Name: parking_system
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module Parking_System(
    input clock,                         // 100 MHz FPGA clock
    input [4:0] parking_slots,           // Input: 5 parking sensors
    output reg [4:0] parking_slots_available, // LED indicators
    output [6:0] seg,                    // 7-segment display segments
    output reg [3:0] an                  // 7-segment enable signals
);

    reg [3:0] display;
    reg [1:0] enable = 0;

    wire slowclock_100Hz;

    seven_seg ss0(display, seg);
    slowclock_100Hz sclk(clock, slowclock_100Hz);

    // Map slot value to individual LED outputs
    always @ (parking_slots) begin
        case(parking_slots)
            0: parking_slots_available = 5'b11111;
            1: parking_slots_available = 5'b11110;
            2: parking_slots_available = 5'b11101;
            3: parking_slots_available = 5'b11100;
            4: parking_slots_available = 5'b11011;
            5: parking_slots_available = 5'b11010;
            6: parking_slots_available = 5'b11001;
            7: parking_slots_available = 5'b11000;
            8: parking_slots_available = 5'b10111;
            9: parking_slots_available = 5'b10110;
            10: parking_slots_available = 5'b10101;
            11: parking_slots_available = 5'b10100;
            12: parking_slots_available = 5'b10011;
            13: parking_slots_available = 5'b10010;
            14: parking_slots_available = 5'b10001;
            15: parking_slots_available = 5'b10000;
            16: parking_slots_available = 5'b01111;
            17: parking_slots_available = 5'b01110;
            18: parking_slots_available = 5'b01101;
            19: parking_slots_available = 5'b01100;
            20: parking_slots_available = 5'b01011;
            21: parking_slots_available = 5'b01010;
            22: parking_slots_available = 5'b01001;
            23: parking_slots_available = 5'b01000;
            24: parking_slots_available = 5'b00111;
            25: parking_slots_available = 5'b00110;
            26: parking_slots_available = 5'b00101;
            27: parking_slots_available = 5'b00100;
            28: parking_slots_available = 5'b00011;
            29: parking_slots_available = 5'b00010;
            30: parking_slots_available = 5'b00001;
            31: parking_slots_available = 5'b00000;
        endcase
    end

    // Toggle 7-segment display
    always @ (posedge slowclock_100Hz) begin
        enable <= enable + 1;
    end

    always @ (posedge slowclock_100Hz) begin
        if (parking_slots == 5'b11111) begin
            // FULL
            case(enable)
                2'b00: begin display = 0; an = 4'b1110; end // L
                2'b01: begin display = 0; an = 4'b1101; end // L
                2'b10: begin display = 1; an = 4'b1011; end // U
                2'b11: begin display = 2; an = 4'b0111; end // F
            endcase
        end else begin
            // OPEN
            case(enable)
                2'b00: begin display = 6; an = 4'b1110; end // n
                2'b01: begin display = 5; an = 4'b1101; end // E
                2'b10: begin display = 4; an = 4'b1011; end // P
                2'b11: begin display = 3; an = 4'b0111; end // O
            endcase
        end
    end

endmodule

